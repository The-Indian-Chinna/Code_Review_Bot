import json
from typing import List
from abc import ABC, abstractmethod
from . import StaticError

class StaticTool(ABC):
    """Base class for all static analysis tools

    """

    def __init__(self, name: str = 'OPTIMUS'):
        self.__name = name

    def load_config_from_file(self, config_file_path: str) -> None:
        """Reads and loads configs from a JSON file.

        This method uses the abstract method ``load_config``
        to load the configuarations specified. Because of this
        if the format of this JSON file does not match that as
        expected by that function, this function will fail.

        Args:
            config_file_path (str): relative file path of the config file.

        Raises:
            ValueError: If `config_file_path` is not a JSON file.

        """

        if not config_file_path.endswith('.json'):
            raise ValueError('Config file must be a JSON file')

        json_file = open(config_file_path, 'r')
        data: json = json.load(json_file)
        json_file.close()
        self.load_config(data)
        
    @abstractmethod
    def load_config(self, config: json) -> None:
        """Loads the specified ``configs`` for this tool.

        This method should be utilized to pass any parameters
        and prepare the tool for execution (calling the ``run`` 
        method)

        Args:
            config (json): It is up to the subclass to define this
            dictionary. 

        """
        pass

    @abstractmethod
    def run(self) -> List[StaticError]:
        """Runs this tool with the given configs set by `load_config`

        This method should not be called before `load_config` or
        `load_config_from_file`. This is undefined behavior.

        Returns:
            [StaticError]: a list of all the error reports generated by
                running this tool in its current configuration

        """
        return []

    @property
    def name(self):
        """str: The name of this tool. default is `OPTIMUS`"""
        return self.__name

